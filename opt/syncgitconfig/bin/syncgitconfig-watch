#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONF_PATH="${CONF_PATH:-/etc/syncgitconfig/syncgitconfig.yaml}"
# shellcheck source=/opt/syncgitconfig/lib/common.sh
. "$SCRIPT_DIR/../lib/common.sh"

main() {
  [[ -f "$CONF_PATH" ]] || { err "No existe $CONF_PATH"; exit 1; }

  load_config_yaml "$CONF_PATH" || exit 1

  local repo_path="$CFG_repo_path"
  local cooldown="$CFG_cooldown_seconds"

  local -a candidates=()
  if (( ${#WATCH_PATHS[@]} )); then
    candidates=("${WATCH_PATHS[@]}")
  else
    if (( ${#PATHS[@]} )); then
      candidates+=("${PATHS[@]}")
    fi
    if (( ${#SRC_PATHS[@]} )); then
      candidates+=("${SRC_PATHS[@]}")
    fi
  fi

  if (( ${#candidates[@]} == 0 )); then
    err "No se han definido rutas para vigilar (configura 'watch_paths' o rutas en 'apps'/'paths')."
    exit 1
  fi

  declare -A seen=()
  local -a watch_list=()
  for path in "${candidates[@]}"; do
    [[ -z "$path" ]] && continue
    local target="$path"
    if [[ -f "$target" ]]; then
      target="$(dirname "$target")"
    fi
    if [[ ! -e "$target" ]]; then
      warn "Ruta configurada para watch no existe: $path"
      continue
    fi
    if [[ ! -d "$target" ]]; then
      target="$(dirname "$target")"
      [[ -z "$target" ]] && target="/"
    fi
    if [[ -z "${seen[$target]:-}" ]]; then
      seen[$target]=1
      watch_list+=("$target")
    fi
  done

  if (( ${#watch_list[@]} == 0 )); then
    err "Ninguna ruta válida para vigilar. Revisa 'watch_paths' o que las rutas de 'apps/paths' existan."
    exit 1
  fi

  if [[ ! -d "$repo_path/.git" ]]; then
    err "repo_path no es un checkout Git válido: $repo_path"
  fi

  local STAGING_ROOT
  STAGING_ROOT="$(staging_root_path)"
  local REPO_HOST_ROOT
  REPO_HOST_ROOT="$(repo_host_root_path)"

  local staging_has_content=0
  if [[ -d "$STAGING_ROOT" && -n "$(find "$STAGING_ROOT" -mindepth 1 -type f -print -quit 2>/dev/null)" ]]; then
    staging_has_content=1
  fi
  local repo_has_content=0
  if [[ -d "$REPO_HOST_ROOT" && -n "$(find "$REPO_HOST_ROOT" -mindepth 1 -type f -print -quit 2>/dev/null)" ]]; then
    repo_has_content=1
  fi

  if (( staging_has_content == 0 && repo_has_content == 0 )); then
    log "[INFO] staging y repo vacíos: ejecutando snapshot inicial (syncgitconfig-run --seed --no-cooldown)."
    if ! "$SCRIPT_DIR/syncgitconfig-run" --seed --no-cooldown; then
      local rc=$?
      log "[WARN] syncgitconfig-run --seed terminó con código $rc"
    fi
  fi

  log "Watcher inicializado (cooldown ${cooldown}s)"
  log "Rutas vigiladas:"
  for path in "${watch_list[@]}"; do
    log "  - $path"
  done

  local last_run=0

  while true; do
    if ! inotifywait -q -e modify,create,delete,move "${watch_list[@]}" >/dev/null 2>&1; then
      sleep 1
      continue
    fi

    local now_sec
    now_sec="$(date +%s)"
    if (( now_sec - last_run < cooldown )); then
      log "[WARN] Dentro de cooldown (${cooldown}s); evento ignorado."
      continue
    fi
    last_run=$now_sec

    log "[INFO] Ejecutando syncgitconfig-run --no-cooldown"
    if ! "$SCRIPT_DIR/syncgitconfig-run" --no-cooldown; then
      local rc=$?
      log "[WARN] syncgitconfig-run terminó con código $rc"
    fi
  done
}

main "$@"
